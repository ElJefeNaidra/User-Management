@using System.IO;
@using Microsoft.AspNetCore.Http;
@using System.Reflection
@using Kendo.Mvc.UI
@using SIDPSF.Common
@using SIDPSF.Common.Generics
@using SIDPSF.Common.StringLocalisation
@using SIDPSF.Features
@using SIDPSF.Features.Administration.Configuration
@using SIDPSF._Resources
@using System.ComponentModel.DataAnnotations

@model SIDPSF.Features.Administration.Configuration.ConfigurationViewModel
@inject Microsoft.Extensions.Caching.Memory.IMemoryCache MemoryCache;

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor;
@inject SIDPSF.Common.StringLocalisation.DatabaseResourceLocalisationProvider.ResourceRepository ResourceRepo

@{
    Layout = "~/Features/_Layout.cshtml";
    ViewData["WindowTitle"] = Model.WindowTitle;
    ViewData["FormTitle"] = Model.FormTitle;
    ViewData["BreadCrumbRoot"] = Model.BreadCrumbRoot;
    ViewData["BreadCrumbTitle"] = Model.BreadCrumbTitle;
}


@await Html.PartialAsync("~/Features/_Shared/_ValidationScriptsPartial.cshtml")

<div class="row">
    <div class="col-sm-12">
        <div class="card mb-1">
            <div class="accordion">
                <div class="accordion-item">
                    <h2 class="accordion-button fw-medium text-light bg-secondary border-bottom text-uppercase collapsed">
                        @ResourceRepo.GetResourceByName("DatabaseConfig")
                    </h2>
                    <div class="accordion-collapse">
                        <div class="accordion-body mb-1">
                            <div class="table-responsive">
                                <table class="table table-bordered table-striped border-primary mb-1">
                                    @foreach (var prop in Model.DatabaseConfig.GetType().GetProperties())
                                    {
                                        // Skip properties of type GenericGetDdlDataCollection
                                        if (prop.PropertyType == typeof(GenericGetDdlDataCollection))
                                        {
                                            continue;
                                        }

                                        var displayNameAttribute = prop.GetCustomAttribute<DbDisplayNameAttribute>();
                                        var displayName = displayNameAttribute != null ? displayNameAttribute.DisplayName : prop.Name;
                                        var descriptionAttribute = prop.GetCustomAttribute<DescriptionAttribute>();
                                        var description = descriptionAttribute != null ? descriptionAttribute.Description : string.Empty;
                                        var hiddenAttribute = prop.GetCustomAttribute<HiddenInputAttribute>();
                                        var displayFormatAttribute = prop.GetCustomAttribute<DisplayFormatAttribute>();
                                        var format = displayFormatAttribute != null ? displayFormatAttribute.DataFormatString.Replace("{0:", "").Replace("}", "") : "dd.MM.yyyy";
                                        var value = prop.GetValue(Model.DatabaseConfig);

                                        <tr>
                                            <td class="label-column">
                                                <label class="col-form-label">@displayName</label>
                                                @if (!string.IsNullOrEmpty(description))
                                                {
                                                    <button type="button" class="btn btn-rounded btn-sm" onclick="showDescription('@prop.Name')">?</button>
                                                    <div id="@prop.Name-desc" class="description text-info" style="display: none;">
                                                        @Html.Raw(description)
                                                        <div class="description text-secondary">
                                                            @ResourceRepo.GetResourceByName("ParamName"): <strong>@prop.Name</strong>
                                                        </div>
                                                    </div>
                                                }
                                            </td>
                                            <td class="content-column">
                                                @{
                                                    if (prop.PropertyType == typeof(bool))
                                                    {
                                                        <input type="checkbox" class="form-check-input large-checkbox checkbox-margin" disabled @(value.Equals(true) ? "checked" : "") />
                                                    }
                                                    else if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(string))
                                                    {
                                                        var dropdownPropName = $"{prop.Name}Ddl";
                                                        var dropdownProp = Model.DatabaseConfig.GetType().GetProperty(dropdownPropName);
                                                        if (dropdownProp != null && hiddenAttribute == null)
                                                        {
                                                            var dropdownData = dropdownProp.GetValue(Model.DatabaseConfig) as GenericGetDdlDataCollection;
                                                            if (dropdownData != null && dropdownData.Any())
                                                            {
                                                                <select id="@prop.Name" class="form-control form-control form-control-table" disabled>
                                                                    @foreach (var item in dropdownData)
                                                                    {
                                                                        <!option value="@item.Id" @(item.Id == (int)value ? "selected=\"selected\"" : "")>@item.Description</!option>
                                                                    }
                                                                </select>
                                                            }
                                                            else
                                                            {
                                                                <span class="form-control form-control form-control-table">@Common.DdlEmpty</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span class="form-control form-control form-control-table">@value</span>
                                                        }
                                                    }
                                                    else if (prop.PropertyType == typeof(DateTime) || prop.PropertyType == typeof(DateTime?))
                                                    {
                                                        if (value is DateTime dateTimeValue)
                                                        {
                                                        // For non-nullable DateTime
                                                            <span class="form-control form-control-table">@dateTimeValue.ToString(format)</span>
                                                        }
                                                        else
                                                        {
                                                            var nullableDateTime = value as DateTime?;
                                                            if (nullableDateTime.HasValue)
                                                            {
                                                            // For nullable DateTime that is not null
                                                                <span class="form-control form-control-table">@nullableDateTime.Value.ToString(format)</span>
                                                            }
                                                            else
                                                            {
                                                            // For nullable DateTime that is null
                                                                <span class="form-control form-control-table">N/A</span>
                                                            }
                                                        }
                                                    }
                                                    else if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(int?))
                                                    {
                                                        if (value is int intValue)
                                                        {
                                                        // For non-nullable DateTime
                                                            <span class="form-control form-control-table">@intValue.ToString()</span>
                                                        }
                                                        else
                                                        {
                                                            var nullableInt = value as int?;
                                                            if (nullableInt.HasValue)
                                                            {
                                                            // For nullable DateTime that is not null
                                                                <span class="form-control form-control-table">@nullableInt.Value.ToString()</span>
                                                            }
                                                            else
                                                            {
                                                            // For nullable DateTime that is null
                                                                <span class="form-control form-control-table">N/A</span>
                                                            }
                                                        }
                                                    }
                                                    else if (prop.PropertyType == typeof(decimal) || prop.PropertyType == typeof(decimal?))
                                                    {
                                                        if (value is decimal decimalValue)
                                                        {
                                                        // For non-nullable DateTime
                                                            <span class="form-control form-control-table">@decimalValue.ToString()</span>
                                                        }
                                                        else
                                                        {
                                                            var nullabledecimal = value as decimal?;
                                                            if (nullabledecimal.HasValue)
                                                            {
                                                            // For nullable DateTime that is not null
                                                                <span class="form-control form-control-table">@nullabledecimal.Value.ToString(format)</span>
                                                            }
                                                            else
                                                            {
                                                            // For nullable DateTime that is null
                                                                <span class="form-control form-control-table">N/A</span>
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        // For nullable DateTime that is null
                                                        <span class="form-control form-control-table">Unknown type</span>
                                                    }
                                                }
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="card mb-1">
            <div class="accordion">
                <div class="accordion-item">
                    <h2 class="accordion-button fw-medium text-light bg-secondary border-bottom text-uppercase collapsed">
                        @ResourceRepo.GetResourceByName("SystemPathsConfig")
                    </h2>
                    <div class="accordion-collapse">
                        <div class="accordion-body mb-1">
                            <div class="table-responsive">
                                <table class="table table-bordered table-striped border-primary mb-1">
                                    @foreach (var prop in Model.SystemPathsConfig.GetType().GetProperties())
                                    {
                                        // Retrieve your custom attribute
                                        var displayAttribute = prop.GetCustomAttribute<DbDisplayNameAttribute>();
                                        var displayName = displayAttribute != null ? displayAttribute.DisplayName : prop.Name;
                                        var descriptionAttribute = prop.GetCustomAttribute<DescriptionAttribute>();
                                        var description = descriptionAttribute != null ? descriptionAttribute.Description : string.Empty;

                                        <tr>
                                            <td class="label-column">
                                                <label class="col-form-label">@displayName</label>
                                                @if (!string.IsNullOrEmpty(description))
                                                {
                                                    <button type="button" class="btn btn-rounded btn-sm" onclick="showDescription('@prop.Name')">?</button>
                                                    <div id="@prop.Name-desc" class="description text-info" style="display: none;">
                                                        @Html.Raw(description)
                                                        <div class="description text-secondary">
                                                            @ResourceRepo.GetResourceByName("ParamName"): <strong>@prop.Name</strong>
                                                        </div>
                                                    </div>

                                                }
                                            </td>
                                            <td class="content-column">
                                                @{
                                                    var value = prop.GetValue(Model.SystemPathsConfig);
                                                    if (prop.PropertyType == typeof(bool))
                                                    {
                                                        <input type="checkbox" class="form-check-input large-checkbox checkbox-margin" disabled @(value.Equals(true) ? "checked" : "") class="custom-class-for-checkbox" />
                                                    }
                                                    else if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(string))
                                                    {
                                                        <span class="form-control form-control form-control-table">@value</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="form-control form-control form-control-table">Unknown Type</span>
                                                    }
                                                }
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="card mb-1">
            <div class="accordion">
                <div class="accordion-item">
                    <h2 class="accordion-button fw-medium text-light bg-secondary border-bottom text-uppercase collapsed">
                        @ResourceRepo.GetResourceByName("AuthenticationConfig")
                    </h2>
                    <div class="accordion-collapse">
                        <div class="accordion-body mb-1">
                            <div class="table-responsive">
                                <table class="table table-bordered table-striped border-primary mb-1">
                                    @foreach (var prop in Model.AuthenticationConfig.GetType().GetProperties())
                                    {
                                        // Retrieve your custom attribute
                                        var displayAttribute = prop.GetCustomAttribute<DbDisplayNameAttribute>();
                                        var displayName = displayAttribute != null ? displayAttribute.DisplayName : prop.Name;
                                        var descriptionAttribute = prop.GetCustomAttribute<DescriptionAttribute>();
                                        var description = descriptionAttribute != null ? descriptionAttribute.Description : string.Empty;

                                        <tr>
                                            <td class="label-column">
                                                <label class="col-form-label">@displayName</label>
                                                @if (!string.IsNullOrEmpty(description))
                                                {
                                                    <button type="button" class="btn btn-rounded btn-sm" onclick="showDescription('@prop.Name')">?</button>
                                                    <div id="@prop.Name-desc" class="description text-info" style="display: none;">
                                                        @Html.Raw(description)
                                                        <div class="description text-secondary">
                                                            @ResourceRepo.GetResourceByName("ParamName"): <strong>@prop.Name</strong>
                                                        </div>
                                                    </div>

                                                }
                                            </td>
                                            <td class="content-column">
                                                @{
                                                    var value = prop.GetValue(Model.AuthenticationConfig);
                                                    if (prop.PropertyType == typeof(bool))
                                                    {
                                                        <input type="checkbox" class="form-check-input large-checkbox checkbox-margin" disabled @(value.Equals(true) ? "checked" : "") class="custom-class-for-checkbox" />
                                                    }
                                                    else if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(string))
                                                    {
                                                        <span class="form-control form-control form-control-table">@value</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="form-control form-control form-control-table">Unknown Type</span>
                                                    }
                                                }
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="card mb-1">
            <div class="accordion">
                <div class="accordion-item">
                    <h2 class="accordion-button fw-medium text-light bg-secondary border-bottom text-uppercase collapsed">
                        @ResourceRepo.GetResourceByName("SSRSConfig")
                    </h2>
                    <div class="accordion-collapse">
                        <div class="accordion-body mb-1">
                            <div class="table-responsive">
                                <table class="table table-bordered table-striped border-primary mb-1">
                                    @foreach (var prop in Model.SSRSConfig.GetType().GetProperties())
                                    {
                                        // Retrieve your custom attribute
                                        var displayAttribute = prop.GetCustomAttribute<DbDisplayNameAttribute>();
                                        var displayName = displayAttribute != null ? displayAttribute.DisplayName : prop.Name;
                                        var descriptionAttribute = prop.GetCustomAttribute<DescriptionAttribute>();
                                        var description = descriptionAttribute != null ? descriptionAttribute.Description : string.Empty;

                                        <tr>
                                            <td class="label-column">
                                                <label class="col-form-label">@displayName</label>
                                                @if (!string.IsNullOrEmpty(description))
                                                {
                                                    <button type="button" class="btn btn-rounded btn-sm" onclick="showDescription('@prop.Name')">?</button>
                                                    <div id="@prop.Name-desc" class="description text-info" style="display: none;">
                                                        @Html.Raw(description)
                                                        <div class="description text-secondary">
                                                            @ResourceRepo.GetResourceByName("ParamName"): <strong>@prop.Name</strong>
                                                        </div>
                                                    </div>

                                                }
                                            </td>
                                            <td class="content-column">
                                                @{
                                                    var value = prop.GetValue(Model.SSRSConfig);
                                                    if (prop.PropertyType == typeof(bool))
                                                    {
                                                        <input type="checkbox" class="form-check-input large-checkbox checkbox-margin" disabled @(value.Equals(true) ? "checked" : "") class="custom-class-for-checkbox" />
                                                    }
                                                    else if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(string))
                                                    {
                                                        <span class="form-control form-control form-control-table">@value</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="form-control form-control form-control-table">Unknown Type</span>
                                                    }
                                                }
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@foreach (var category in new[] { "DatabaseLogs", "SSRSErrorLogs", "ApplicationErrorLogs", "DbContextErrorLogs" })
{
    <div class="row">
        <div class="col-sm-12">
            <div class="card mb-1">
                <div class="accordion">
                    <div class="accordion-item">
                        <h2 class="accordion-button fw-medium text-light bg-secondary border-bottom text-uppercase collapsed">
                            @ResourceRepo.GetResourceByName(category)
                        </h2>
                        <div class="accordion-collapse">
                            <div class="accordion-body mb-0">
                                <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                                    <table class="table table-bordered table-striped border-primary mb-1 sticky-header">
                                        <thead>
                                            <tr>
                                                <th>@ResourceRepo.GetResourceByName("LogDateTime")</th>
                                                <th>@ResourceRepo.GetResourceByName("LogMessage")</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                var logEntries = (IEnumerable<ConfigurationViewModel.LogEntry>)Model.GetType().GetProperty(category)?.GetValue(Model, null);
                                                var sortedLogEntries = logEntries.OrderByDescending(log => log.LogDateTime);

                                                foreach (var log in sortedLogEntries)
                                                {
                                                    <tr>
                                                        <td>@log.LogDateTime.ToString("dd/MM/yyyy HH:mm:ss")</td>
                                                        <td>@log.LogMessage</td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<style>
    .form-control-table {
        background: transparent !important;
        ;
        border: none;
        padding-left: 10px;
    }

    .label-column {
        width: 50%; /* Adjust the percentage based on your preference */
        padding-left: 10px !important;
        padding-top: 1px !important;
        padding-bottom: 1px !important;
        white-space: nowrap; /* Prevents word wrapping */
        font-weight: 500;
    }

    .content-column {
        width: 50%; /* Adjust the percentage based on your preference */
        padding-left: 1px !important;
        padding-top: 1px !important;
        padding-bottom: 1px !important;
    }


    .checkbox-margin {
        margin-left: 10px;
        margin-top: 5px;
    }

</style>

<script>
    function showDescription(propertyName) {
        var descElement = document.getElementById(propertyName + "-desc");
        if (descElement.style.display === "none") {
            descElement.style.display = "block";
        } else {
            descElement.style.display = "none";
        }
    }
</script>

<style>
    .sticky-header th {
        position: sticky;
        top: 0;
        z-index: 1; /* Elevate the header above other content */
        background-color: #e6e9ef; /* Slightly darker grey for headers */
    }
</style>